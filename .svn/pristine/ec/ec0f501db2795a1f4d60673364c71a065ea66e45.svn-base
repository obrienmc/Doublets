
import java.util.HashMap;
import java.util.Iterator;


public class Chain implements Iterable<String>{
	
	//LinkedList<String> wordChain;
	HashMap<String, Integer> wordChain;
	int length;
	String lastWord;
	
	public Chain(){
		wordChain = new HashMap<String, Integer>();
		length = 0;
		lastWord = "";
	}
	
	private Chain(HashMap<String, Integer> list){
		wordChain = list;
	}
	
	public Chain addLast(String word){
		@SuppressWarnings("unchecked")
		HashMap<String, Integer> newList = (HashMap<String, Integer>) this.wordChain.clone();
		newList.put(word, this.length);
		Chain newChain = new Chain(newList);
		newChain.length = this.length + 1;
		newChain.lastWord = word;
		return newChain;
	}
	
	public String getLast(){
		return lastWord;
	}
	
	public int length(){
		return this.length;
	}
	
	public boolean contains(String s){
		return this.wordChain.containsKey(s);
	}
	
	public int getValue(String target){
		int diff = 0;
		String current = getLast();
		for(int i = 0; i < target.length(); i++){
			if(current.charAt(i) != target.charAt(i))
				diff++;
		}
		return diff + this.length;
	}

	@Override
	public Iterator<String> iterator() {
		return new ChainIterator(this.wordChain, this.length);

	}
	
	public String toString(){
		StringBuilder build = new StringBuilder();
		build.append("[");
		Iterator<String> iter = iterator();
		while(iter.hasNext()){
			build.append(iter.next() + ", ");
		}
		return build.substring(0, build.length() - 2) + "]";
	}
	
}

class ChainIterator implements Iterator<String>{

	String[] wordList;
	int current;
	
	public ChainIterator(HashMap<String, Integer> map, int length){
		wordList = new String[length];
		for(String s : map.keySet()){
			wordList[map.get(s)] = s;
		}
		current = 0;
	}
	@Override
	public boolean hasNext() {
		return current < wordList.length;
	}

	@Override
	public String next() {
		String s = wordList[current];
		current++;
		return s;
	}

	@Override
	public void remove() {
		// Do not remove things!
		
	}
	
}
